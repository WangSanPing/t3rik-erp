package ${packageName}.controller;

import java.util.List;
import java.util.Map;
import jakarta.servlet.http.HttpServletResponse;

import org.springframework.security.access.prepost.PreAuthorize;
import jakarta.annotation.Resource;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.t3rik.common.annotation.Log;
import com.t3rik.common.core.controller.BaseController;
import com.t3rik.common.core.domain.AjaxResult;
import com.t3rik.common.utils.StringUtils;
import com.t3rik.common.enums.system.BusinessType;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import com.t3rik.common.utils.poi.ExcelUtil;
#if($table.crud || $table.sub)
import com.t3rik.common.core.page.TableDataInfo;
#elseif($table.tree)
#end

/**
 * ${functionName}Controller
 *
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController {

    @Resource
    private I${ClassName}Service ${className}Service;

    /**
     * 查询${functionName}列表
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:list')")
    @GetMapping("/list")
#if($table.crud || $table.sub)
    public TableDataInfo list(${ClassName} ${className}) {
        // 获取查询条件
        LambdaQueryWrapper<${ClassName}> queryWrapper = getQueryWrapper(${className});
        // 组装分页
        Page<${ClassName}> page = getMPPage(${className});
        // 查询
        this.${className}Service.page(page, queryWrapper);
        return getDataTableWithPage(page);
    }
#elseif($table.tree)
    public AjaxResult list(${ClassName} ${className}) {
        // 获取查询条件
        LambdaQueryWrapper<${ClassName}> queryWrapper = getQueryWrapper(${className});
        List<${ClassName}> list = this.${className}Service.list(queryWrapper);
        return AjaxResult.success(list);
    }
#end

    /**
     * 导出${functionName}列表
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:export')")
    @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public void export(HttpServletResponse response, ${ClassName} ${className}) {
        // 获取查询条件
        LambdaQueryWrapper<${ClassName}> queryWrapper = getQueryWrapper(${className});
        List<${ClassName}> list = this.${className}Service.list(queryWrapper);
        ExcelUtil<${ClassName}> util = new ExcelUtil<${ClassName}>(${ClassName}. class);
        util.exportExcel(response, list, "${functionName}数据");
    }

    /**
     * 获取${functionName}详细信息
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:query')")
    @GetMapping(value = "/{${pkColumn.javaField}}")
    public AjaxResult getInfo(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
        return AjaxResult.success(this.${className}Service.getById(${pkColumn.javaField}));
    }

    /**
     * 新增${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:add')")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @PostMapping
    public AjaxResult add(@RequestBody ${ClassName} ${className}) {
        return toAjax(this.${className}Service.save(${className}));
    }

    /**
     * 修改${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:edit')")
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @PutMapping
    public AjaxResult edit(@RequestBody ${ClassName} ${className}) {
        return toAjax(this.${className}Service.updateById(${className}));
    }

    /**
     * 删除${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:remove')")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
    @DeleteMapping("/{${pkColumn.javaField}s}")
    public AjaxResult remove(@PathVariable List<${pkColumn.javaType}> ${pkColumn.javaField}s) {
        return toAjax(this.${className}Service.removeByIds(${pkColumn.javaField}s));
    }

    /**
    * 获取查询条件
    */
    public LambdaQueryWrapper<${ClassName}> getQueryWrapper(${ClassName} ${className}) {
        LambdaQueryWrapper<${ClassName}> queryWrapper = new LambdaQueryWrapper<>();
#foreach ($column in $columns)
#if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches("[A-Z]"))
#set($AttrName=$column.javaField)
#else
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#end
#if($column.isQuery == '1')
#if($column.javaField == 'status')
        Optional.ofNullable(${className}.get${AttrName}()).ifPresent(status -> queryWrapper.eq( ${ClassName}::get${AttrName}, ${className}.get${AttrName}().getCode()));
#elseif($column.javaType == 'String')
#if($column.queryType == 'LIKE')
        queryWrapper.like(StringUtils.isNotEmpty(${className}.get${AttrName}()), ${ClassName}::get${AttrName}, ${className}.get${AttrName}());
#else
        queryWrapper.eq(StringUtils.isNotEmpty(${className}.get${AttrName}()), ${ClassName}::get${AttrName}, ${className}.get${AttrName}());
#end
#else
        queryWrapper.eq(${className}.get${AttrName}() != null, ${ClassName}::get${AttrName}, ${className}.get${AttrName}());
#end
#end
#end
        // 默认创建时间倒序
        queryWrapper.orderByDesc(${ClassName}::getCreateTime);
        Map<String, Object> params = ${className}.getParams();
        queryWrapper.between(params.get("beginTime") != null && params.get("endTime") != null,${ClassName}::getCreateTime, params.get("beginTime"), params.get("endTime"));
        return queryWrapper;
    }
}
